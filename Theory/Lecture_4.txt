Is JSX mandatory for React?

JSX is not requirement for using React. Using React without JSX is especially convinent
when you don't want to set up compilation in your build environment

Each JSX element is just syntactic sugar for calling 
React.createElement(component, props, ...children). 
So, anything you can do with JSX can also be done with just plain JavaScript.


Is ES6 mandatory for React?
ES6 provides us with the many new features like classes, arrow functions, let const etc

If we don't use ES6 then we may have to use the create-react-class moudule

var createReactClass = require('create-react-class');
var Greeting = createReactClass({
  render: function() {
    return <h1>Hello, {this.props.name}</h1>;
  }
});

{TitleComponent} it used for nomral funcrion call if we call the component like this it will give
an error

{<TitleComponent/>} it is used to call the component and will takes props 

{<TitleComponent></TitleComponent>} This is also used to call components whatever is wrapped 
between these will go into the children prop which can be accessed this calling component


What is <React.Fragment></React.Fragment> and <></> ?

React.Fragment allows to wrap or group multiple elements without adding an extra node to the 
DOM.This can be useful when rendering multiple child elements/components in a single parent component.


What is Virtual DOM ?
The virtual DOM (VDOM) is a programming concept where an ideal, or “virtual”, representation 
of a UI is kept in memory and synced with the “real” DOM by a library such as ReactDOM. 
This process is called reconciliation.
Since “virtual DOM” is more of a pattern than a specific technology, people sometimes say 
it to mean different things. In React world, the term “virtual DOM” is usually associated 
with React elements since they are the objects representing the user interface. 
React, however, also uses internal objects called “fibers” to hold additional information 
about the component tree. They may also be considered a part of “virtual DOM” implementation 
in React.


reconciliation in react

React provides a declarative API so that you don’t have to worry about exactly what 
changes on every update. This makes writing applications a lot easier, but it might not 
be obvious how this is implemented within React. This article explains the choices we 
made in React’s “diffing” algorithm so that component updates are predictable while being
fast enough for high-performance apps.


React Fibre

React Fiber is an ongoing reimplementation of React's core algorithm. It is the 
culmination of over two years of research by the React team.The goal of React Fiber is 
to increase its suitability for areas like animation, layout, and gestures. Its headline 
feature is incremental rendering: the ability to split rendering work into chunks and 
spread it out over multiple frames.Other key features include the ability to pause, abort, 
or reuse work as new updates come in; the ability to assign priority to different types
of updates; and new concurrency primitives.


Why we need keys in React? When do we need keys in React?

A “key” is a special string attribute you need to include when creating lists of elements.
Keys help React identify which items have changed, are added, or are removed. Keys should be 
given to the elements inside the array to give the elements a stable identity.


don’t recommend using indexes for keys if the order of items may change. This can negatively 
impact performance and may cause issues with component state.


what are props in react ?

Props are arguments passed into React components.
Props are passed to components via HTML attributes.

React Props are like function arguments in JavaScript and attributes in HTML.
To send props into a component, use the same syntax as HTML attributes:
<Car brand="Ford" />;



A Config Driven UI
It means whatever the data component will render will based on some configuration
when we change the data the component will render some other information
this is used so that the component logic can be reused for different set of data

a workflow which managed passing data and metrics to the classifiers, and. a configuration
 system which selected which classifiers ran, the order they ran in, and the values passed 
 into their initializer.