What are Microservices?

Microservices are an architectural and organizational approach to software development where software is composed of small
independent services that communicate over well-defined APIs. These services are owned by small, self-contained teams.

Microservices architectures make applications easier to scale and faster to develop, enabling innovation and accelerating 
time-to-market for new features.
Microservices - also known as the microservice architecture - is an architectural style that structures an application as a collection of services that are:
Independently deployable
Loosely coupled
Organized around business capabilities
Owned by a small team
The microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, 
reliably and sustainably - a necessity for competing and winning in today’s world.


what is monolith architecture?

Image result for what is monolith architecture
A monolithic architecture is a singular, large computing network with one code base that couples all of the business
concerns together. To make a change to this sort of application requires updating the entire stack by accessing the code 
base and building and deploying an updated version of the service-side interface.


Monolithic vs. Microservices Architecture
With monolithic architectures, all processes are tightly coupled and run as a single service. This means that if 
one process of the application experiences a spike in demand, the entire architecture must be scaled. Adding or 
improving a monolithic application’s features becomes more complex as the code base grows. This complexity limits 
experimentation and makes it difficult to implement new ideas. Monolithic architectures add risk for application 
availability because many dependent and tightly coupled processes increase the impact of a single process failure.

With a microservices architecture, an application is built as independent components that run each application process
as a service. These services communicate via a well-defined interface using lightweight APIs. Services are built for 
business capabilities and each service performs a single function. Because they are independently run, each service can
be updated, deployed, and scaled to meet demand for specific functions of an application.


why do we need useEffect hook

The useEffect Hook allows you to perform side effects in your components. Some examples of side effects are: 
fetching data, directly updating the DOM, and timers. useEffect accepts two arguments.
By using this Hook, you tell React that your component needs to do something after render. React will remember the 
function you passed (we’ll refer to it as our “effect”), and call it later after performing the DOM updates.

optional chaining

Optional chaining is a process for querying and calling properties, methods, and subscripts on an optional that might 
currently be nil . If the optional contains a value, the property, method, or subscript call succeeds; if the optional
is nil , the property, method, or subscript call returns nil


Shimmer UI

A shimmer UI resembles the page's actual UI, so users will understand how quickly the web or mobile app will load 
even before the content has shown up. It gives people an idea of what's about to come and what's happening 
(it's currently loading) when a page full of content/data takes more than 3 - 5 seconds to load.


difference between JS expressiona and JS statement

Expressions can be assigned or used as operands, while statements can only be declared.

Statements create side effects to be useful, while expressions are values or execute to values.

class Person {
  sayHi() {
    alert("Hi");
  }
}

// we instantiate it as a statement.
new Person().sayHi();

// we instantiate it as an expression
let User = Person();


What is conditonal rendering?
Conditional rendering in the lightning web component (lwc) is a way to display components or elements based on a 
specific condition. For instance, you can display different greeting messages depending on the time of day.


What is CORS?

Cross-Origin Resource Sharing (CORS) is an HTTP-header based mechanism that allows a server to indicate any origins 
(domain, scheme, or port) other than its own from which a browser should permit loading resources. CORS also relies on a 
mechanism by which browsers make a "preflight" request to the server hosting the cross-origin resource, in order to check 
that the server will permit the actual request. In that preflight, the browser sends headers that indicate the HTTP method
and headers that will be used in the actual request.

An example of a cross-origin request: the front-end JavaScript code served from https://domain-a.com uses XMLHttpRequest to make a request for https://domain-b.com/data.json.


what is asyn/await

"async and await make promises easier to write"

async makes a function return a Promise

await makes a function wait for a Promise


what is the use of const json  = await data.json()

it is used to destructure the JSON data into JS object