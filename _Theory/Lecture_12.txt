useContext vs Redux.

  useContext is a hook that provides a way to pass data through the component tree 
  without manually passing props down through each nested component

  Redux is a state managing library used in JavaScript apps. It is very popular for React and React-Native. 
  It simply manages the state and data of your application.

  Building Parts of redux:

  Action
  Reducer
  Store

Advantage of using Redux Toolkit over Redux.

  Redux used to be great but if you have tried none of them, I would highly recommend using Redux-Toolkit. 
  The only case where I may want you to stick to redux is when you're using class-based components, where Redux 
  Toolkit does have some boilerplate (like Redux) and you may miss out decent support.

  However with functional components, Redux toolkit is like Redux on steroids.

  Reason for using Redux toolkit:

  A lot lesser boilerplate code is required compared to Redux.

  Redux hooks like useSelector and useDispatch make things so short and easy to use. [This is not specific to Redux 
  toolkit, however, highlighting it here as it is extremely helpful to consume these hooks in functional component and 
  might be helpful for those who are completely new to redux]

  You don't need to do manual thunk setup as redux-toolkit comes with out of the box createAsyncThunk which enables you
  to perform async operations in very hassle free way.

  getState is also very helpful in obtaining state variables across any of your actions or async operations.

  Mutability might be considered as advantage or disadvantage, but if you're not too used to writing with spread 
  operators, you might love this feature as well. Do straight assignments and let redux toolkit take care of mutability
  under the hoods.

  current can be used to log your state anywhere in case you want to debug and understand where things are going wrong. 
  (Of course, Redux debugger tools are great as well)

  Prebuilt templates: you might want to use npx create-react-app my-app --template redux-typescript or if you're using 
  it with next: yarn create next-app --example with-redux with-redux-app. It gives you a setup ready redux toolkit boiler
  plate and also contains a boiler plate of most important redux state management applications so that you could refer 
  them to create your own slices very easily.

  I have been using a lot of redux and initially it was a bit confusing but once you get a good command over 
  redux toolkit and if you're using a lot of functional components, you probably would never go back to redux again.

Explain Dispatcher.

  The dispatch function accepts an object that represents the type of action we want to execute when it is called. 
  Basically, it sends the type of action to the reducer function to perform its job, which, of course, is updating the 
  state

Explain Reducer.

  Reducers are functions that take the current state and an action as arguments, and return a new state result.
  In other words, (state, action) => newState

Explain slice.

  A "slice" is a collection of Redux reducer logic and actions for a single feature in your app, typically 
  defined together in a single file. The name comes from splitting up the root Redux state object into multiple "slices"
  of state


A function that accepts an initial state, an object of reducer functions, and a "slice name", and automatically generates
action creators and action types that correspond to the reducers and state.


Explain selector.

  A selector is a pure function that takes a state object from the Redux store and returns some information extracted 
  from that state object. Selectors are most commonly used in mapStateToProps functions to provide data to your React 
  components


Explain createSlice and the configuration it takes.

  import { createSlice } from '@reduxjs/toolkit'
  import type { PayloadAction } from '@reduxjs/toolkit'

  interface CounterState {
    value: number
  }

  const initialState = { value: 0 } as CounterState

  const counterSlice = createSlice({
    name: 'counter',
    initialState,
    reducers: {
      increment(state) {
        state.value++
      },
      decrement(state) {
        state.value--
      },
      incrementByAmount(state, action: PayloadAction<number>) {
        state.value += action.payload
      },
    },
  })

  export const { increment, decrement, incrementByAmount } = counterSlice.actions
  export default counterSlice.reducer